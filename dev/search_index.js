var documenterSearchIndex = {"docs":
[{"location":"api/#GEOGloWS.jl-API","page":"API","title":"GEOGloWS.jl API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The GEOGloWS.jl API sends requests to the GEOGloWS ECMWF Streamflow service and formats the returned data into Julia Types. For more in depth documentation on specific methods that this package interfaces with, see the official GEOGloWS Documention.","category":"page"},{"location":"api/#Model-run-data","page":"API","title":"Model run data","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.available_data","category":"page"},{"location":"api/#GEOGloWS.available_data","page":"API","title":"GEOGloWS.available_data","text":"available_data()\n\nreturns the regions available and their corresponding available dates. See also available_regions() and available_dates()\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.available_regions","category":"page"},{"location":"api/#GEOGloWS.available_regions","page":"API","title":"GEOGloWS.available_regions","text":"available_regions()\n\nreturns returns the available regions.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.available_dates","category":"page"},{"location":"api/#GEOGloWS.available_dates","page":"API","title":"GEOGloWS.available_dates","text":"available_dates(region::AbstractString)\n\nreturns the available forecast dates.\n\n\n\n\n\n","category":"function"},{"location":"api/#Forecast-data","page":"API","title":"Forecast data","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.forecast_stats","category":"page"},{"location":"api/#GEOGloWS.forecast_stats","page":"API","title":"GEOGloWS.forecast_stats","text":"forecast_stats(parameters::AbstractDict{Symbol,<:Any})\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(reach_id::Int; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(reach_id::Int,date::AbstractString; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(reach_id::Int,date::TimeType; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(lat::Real, lon::Real, date::AbstractString; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\nforecast_stats(lat::Real, lon::Real, date::TimeType; return_format::Symbol = :csv)\n\nreturns statistics calculated from 51 forecast ensemble members.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.forecast_ensembles","category":"page"},{"location":"api/#GEOGloWS.forecast_ensembles","page":"API","title":"GEOGloWS.forecast_ensembles","text":"forecast_ensembles(parameters::AbstractDict{Symbol,<:Any})\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(reach_id::Int; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(reach_id::Int, date::AbstractString; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(reach_id::Int, date::TimeType; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(lat::Real, lon::Real, date::AbstractString; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\nforecast_ensembles(lat::Real, lon::Real, date::TimeType; return_format::Symbol = :csv)\n\nreturns a timeseries for each of the 51 normal forecast ensemble members and the 52nd higher resolution forecast\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.forecast_records","category":"page"},{"location":"api/#GEOGloWS.forecast_records","page":"API","title":"GEOGloWS.forecast_records","text":"forecast_records(parameters::AbstractDict{Symbol,<:Any})\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(reach_id::Int; return_format::Symbol = :csv)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(reach_id::Int, start_date::TimeType, end_date::TimeType; return_format::Symbol = :csv,)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(reach_id::Int, start_date::AbstractString, end_date::AbstractString; return_format::Symbol = :csv,)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(lat::Real, lon::Real, start_date::TimeType, end_date::TimeType; return_format::Symbol = :csv,)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\nforecast_records(lat::Real, lon::Real, start_date::AbstractString, end_date::AbstractString; return_format::Symbol = :csv,)\n\nretrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.forecast_warnings","category":"page"},{"location":"api/#GEOGloWS.forecast_warnings","page":"API","title":"GEOGloWS.forecast_warnings","text":"forecast_warnings(parameters::AbstractDict{Symbol,<:Any})\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\nforecast_warnings(; return_format::Symbol = :csv)\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\nforecast_warnings(date::TimeType; return_format::Symbol = :csv)\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\nforecast_warnings(region::AbstractString; return_format::Symbol = :csv)\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\nforecast_warnings(region::AbstractString, date::TimeType; return_format::Symbol = :csv)\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\nforecast_warnings(region::AbstractString, date::AbstractString; return_format::Symbol = :csv)\n\nreturns a csv created to summarize the potential return period level flow events coming to the reaches in a specified region. The CSV contains a column for the reach_id, lat of the reach, lon of the reach, maximum forecasted flow in the next 15 day forecast, and a column for each of the return periods (2, 10, 20, 25, 50, 100) which will contain the date when the forecast is first expected to pass that threshold\n\n\n\n\n\n","category":"function"},{"location":"api/#Historic-data","page":"API","title":"Historic data","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.historic_simulation","category":"page"},{"location":"api/#GEOGloWS.historic_simulation","page":"API","title":"GEOGloWS.historic_simulation","text":"historic_simulation(parameters::AbstractDict{Symbol,<:Any})\n\nreturns simulated streamflow data based on the ERA-5 dataset. A successful response will return a time series with date-value pairs.\n\n\n\n\n\nhistoric_simulation(reach_id::Int; return_format::Symbol = :csv)\n\nreturns simulated streamflow data based on the ERA-5 dataset. A successful response will return a time series with date-value pairs.\n\n\n\n\n\nhistoric_simulation(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nreturns simulated streamflow data based on the ERA-5 dataset. A successful response will return a time series with date-value pairs.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.return_periods","category":"page"},{"location":"api/#GEOGloWS.return_periods","page":"API","title":"GEOGloWS.return_periods","text":"return_periods(parameters::AbstractDict{Symbol,<:Any})\n\nreturns the 2, 5, 10, 25, 50, and 100 year return period based on the 40-years simulated streamflow data and using the Gumbel Method. A successful response will return key-value pairs for earch return period along with metadata.\n\n\n\n\n\nreturn_periods(reach_id::Int; return_format::Symbol = :csv, forcing::Symbol = :era_5,)\n\nreturns the 2, 5, 10, 25, 50, and 100 year return period based on the 40-years simulated streamflow data and using the Gumbel Method. A successful response will return key-value pairs for earch return period along with metadata.\n\n\n\n\n\nreturn_periods(lat::Real, lon::Real; return_format::Symbol = :csv, forcing::Symbol = :era_5,)\n\nreturns the 2, 5, 10, 25, 50, and 100 year return period based on the 40-years simulated streamflow data and using the Gumbel Method. A successful response will return key-value pairs for earch return period along with metadata.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.daily_averages","category":"page"},{"location":"api/#GEOGloWS.daily_averages","page":"API","title":"GEOGloWS.daily_averages","text":"daily_averages(parameters::AbstractDict{Symbol,<:Any})\n\nreturns the average flow for each day of the year for the Historic Simulation\n\n\n\n\n\ndaily_averages(reach_id::Int; return_format::Symbol = :csv)\n\nreturns the average flow for each day of the year for the Historic Simulation\n\n\n\n\n\ndaily_averages(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nreturns the average flow for each day of the year for the Historic Simulation\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GEOGloWS.monthly_averages","category":"page"},{"location":"api/#GEOGloWS.monthly_averages","page":"API","title":"GEOGloWS.monthly_averages","text":"monthly_averages(parameters::AbstractDict{Symbol,<:Any})\n\nreturns the average flow for each month of the year for the Historic Simulation\n\n\n\n\n\nmonthly_averages(reach_id::Int; return_format::Symbol = :csv)\n\nreturns the average flow for each month of the year for the Historic Simulation\n\n\n\n\n\nmonthly_averages(lat::Real, lon::Real; return_format::Symbol = :csv)\n\nreturns the average flow for each month of the year for the Historic Simulation\n\n\n\n\n\n","category":"function"},{"location":"#GEOGloWS.jl","page":"Home","title":"GEOGloWS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package to request data from the GEOGloWS ECMWF Streamflow service","category":"page"},{"location":"","page":"Home","title":"Home","text":"Information regarding the GEOGloWS ECMWF Streamflow service can be found at the About page","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"$ julia\njulia> ]\npkg> add GEOGloWS\njulia> using GEOGloWS","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GEOGloWS services provides critical historical and forecast information on streamflow for every reach across the globe. This quick start example illustrates how to request data for the Brahmaputra River near Guwahati, India.","category":"page"},{"location":"#Requesting-historical-data","page":"Home","title":"Requesting historical data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GEOGloWS\n\ndf = GEOGloWS.historic_simulation(26.1807, 91.7108)\n\ndf\n15553×2 DataFrame\n   Row │ datetime             streamflow_m^3/s\n       │ DateTime…            Float64          \n───────┼───────────────────────────────────────\n     1 │ 1979-01-01T00:00:00       0.0\n     2 │ 1979-01-02T00:00:00       3.41469\n     3 │ 1979-01-03T00:00:00       26.3249\n     4 │ 1979-01-04T00:00:00       68.7416\n   ⋮   │          ⋮                  ⋮\n 15550 │ 2021-07-28T00:00:00       24899.9\n 15551 │ 2021-07-29T00:00:00       23278.6\n 15552 │ 2021-07-30T00:00:00       22384.6\n 15553 │ 2021-07-31T00:00:00       22817.1\n                             15545 rows omitted\n","category":"page"},{"location":"#Requesting-forecast-data","page":"Home","title":"Requesting forecast data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GEOGloWS\n\ndf = GEOGloWS.forecast_ensembles(26.1807, 91.7108)\n\ndf\n145×53 DataFrame\n Row │ datetime             ensemble_01_m^3/s  ensemble_10_m^3/s  ensemble_11_m^3/s  ensemble_12_m^3/s  ensemble_13_m^3/s  ensemble_14_m^3/s  ensemble_15_m^3/s  ensemble_16_m^3/s  ensembl ⋯\n     │ DateTime…            Float64?           Float64?           Float64?           Float64?           Float64?           Float64?           Float64?           Float64?           Float64 ⋯\n─────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 2021-10-16T00:00:00            10738.7            10738.7            10738.7            10738.7            10738.7            10738.7            10738.7            10738.7          ⋯\n   2 │ 2021-10-16T01:00:00          missing            missing            missing            missing            missing            missing            missing            missing   \n   3 │ 2021-10-16T02:00:00          missing            missing            missing            missing            missing            missing            missing            missing   \n   4 │ 2021-10-16T03:00:00            10687.7            10687.6            10687.7            10687.6            10687.7            10687.6            10687.6            10687.6\n  ⋮  │          ⋮                   ⋮                  ⋮                  ⋮                  ⋮                  ⋮                  ⋮                  ⋮                  ⋮                  ⋱\n 142 │ 2021-10-30T06:00:00            18810.5            20950.2            18868.2            19794.4            16530.8            20430.2            17165.0            14943.7          ⋯\n 143 │ 2021-10-30T12:00:00            19617.2            21530.3            19545.2            20586.4            17056.5            21485.9            17189.7            15129.7\n 144 │ 2021-10-30T18:00:00            20127.3            21759.9            19995.9            21154.5            17334.7            22283.9            17025.3            15103.7\n 145 │ 2021-10-31T00:00:00            20292.8            21616.3            20157.9            21426.9            17329.0            22724.2            16667.9            14857.3\n                                                                                                                                                              44 columns and 137 rows omitted","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information on the methods the signatures, please see the API documentation","category":"page"}]
}
